name: Read artifacts for tests

inputs:
  package-name:
    required: true
  is-docker:
    required: false
    default: false
  node-version:
    required: false

runs:
  using: composite
  steps:
    - if: ${{ inputs.node-version}}
      uses: actions/setup-node@v3
      with: 
        node-version: ${{ inputs.node-version }}

    - uses: actions/github-script@v6
      with:
        script: |
          const delay = ms => new Promise(resolve => setTimeout(resolve, ms));

          let artifacts = {};

          for(let i = 0;i<36&&!artifacts.total_count;i++,await delay(5000)) {
            try {
              ({ data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              repo: context.repo.repo,
              owner: context.repo.owner,
              run_id: context.payload.inputs.deploy_run_id
            }));
            }
            catch (e) {
              console.log(e);
            }
          }

          console.log(${{ inputs.is-docker }});
          console.log(${{ !inputs.is-docker }});
          console.log(${{ !!inputs.is-docker }});

          const artifactName = ${{ inputs.is-docker }} ? 'docker' : 'npm';
          const packageName =  ${{ inputs.is-docker }} ? 'docker.zip' : 'package.zip';

          const { data: artifact } = await github.request(artifacts.artifacts.find(artifact=> artifact.name === artifactName).archive_download_url);
          require('fs').writeFileSync(require('path').join(process.env.GITHUB_WORKSPACE, packageName), Buffer.from(artifact))

    - shell: bash
      if: ${{ inputs.is-docker == 'false' }}
      run: |
        unzip package.zip
        tar --strip-components=1 -xzf ${{ inputs.package-name }}-*.tgz

    - shell: bash
      if: ${{ inputs.is-docker == 'true' }}
      run: |
        unzip docker.zip
        docker load -i ${{ inputs.package-name }}-*.tar